<?php
namespace Library\Core\Scaffold;

use Library\Core\Bootstrap;
use Library\Core\Entity\Mapping\MappingAbstract;
use Library\Core\Exception\CoreException;
use Library\Core\FileSystem\File;

/**
 * This class can scaffold an Entity class
 *
 * Class Entities
 * @package Library\Core\Scaffold
 */
class Entities
{

    /**
     * Table name to generate Entity class from
     *
     * @var string
     */
    protected $sTableName = '';

    /**
     * Scaffolded Entity namespace
     * @var string
     */
    protected $sNamespace = 'app\\Entities';

    /**
     * Scaffolded Entity cache duration in milliseconds
     *
     * @var int
     */
    protected $iCacheDuration = 60;

    /**
     * Scaffolded Entity configuration
     *
     * @var bool
     */
    protected $bIsSearchable = false;
    protected $bIsDeletable  = false;
    protected $bIsCacheable  = false;
    protected $bIsHistorized = false;

    /**
     * Scaffolded Entity mapping configuration
     *
     * @var array
     */
    protected $aMappingConfiguration = array();

    /**
     * Instance constructor
     *
     * @param string $sTableName
     * @throws EntityScaffoldException
     */
    public function __construct($sTableName)
    {

        if (empty($sTableName) === true) {
            throw new EntityScaffoldException(
                EntityScaffoldException::getError(EntityScaffoldException::ERROR_NO_TABLE_NAME_PROVIDED),
                EntityScaffoldException::ERROR_NO_TABLE_NAME_PROVIDED
            );
        }

        $this->sTableName = $sTableName;

    }

    /**
     * Process the Entity scaffolding
     *
     * @return bool
     */
    public function process()
    {
        $sClassContent = $this->buildClassContent();
        $sEntityFilePath = $this->computePathFromNamespace() . $this->buildEntityFilename();
        if (File::create($sEntityFilePath) === true) {
            return File::write($sEntityFilePath, $sClassContent);
        }
        return false;
    }

    protected function buildClassContent()
    {
        return '<?php
namespace ' . $this->sNamespace . ';

use Library\Core\Entity\Entity;' . ((empty($this->aMappingConfiguration) === false)
? '
use Library\Core\Entity\Mapping\MappingAbstract;
'
: '') . '

/**
 * ' . ucfirst($this->getTableName()) . ' Entity
 * This class was generated by the Entities scaffolding component.
 *
 * Class ' . ucfirst($this->getTableName()) . '
 * @package ' . $this->sNamespace . '
 */
class ' . ucfirst($this->getTableName()) . ' extends Entity {


    const ENTITY        = "' . ucfirst($this->getTableName()) . '";
    const TABLE_NAME    = "' . $this->getTableName() . '";
    const PRIMARY_KEY   = "id' . $this->getTableName() . '";

    /**
     * Object caching duration in seconds
     * @var integer
     */
    protected $iCacheDuration = ' . $this->iCacheDuration . ';

    /**
     * Entity properties
     * @var bool
     */
    protected $bIsSearchable = ' . (($this->bIsSearchable === true) ? 'true' : 'false') . ';
    protected $bIsDeletable  = ' . (($this->bIsSearchable === true) ? 'true' : 'false') . ';
    protected $bIsCacheable  = ' . (($this->bIsSearchable === true) ? 'true' : 'false') . ';
    protected $bIsHistorized = ' . (($this->bIsSearchable === true) ? 'true' : 'false') . ';

    /**
     * Mapping configuration
     * @var array
     */
    protected $aMappingConfiguration = ' . $this->buildMappingConfigurations() . ';
}
        ';
    }

    /**
     * Build scaffolded Entity mapping
     * @return string
     */
    protected function buildMappingConfigurations()
    {
        $sOutput = 'array(';
        $aOutput = array();
        foreach ($this->aMappingConfiguration as $sMappedClass => $aConfiguration) {
            $aOutput[] = '
        \'' . $sMappedClass . '\' => array(' . $this->buildMappingConfiguration($aConfiguration)  . "\n\t\t)";
        }
        return $sOutput . implode(",\n", $aOutput) . "\n\t)";
    }

    /**
     * Build a mapping for the scaffolded Entity
     *
     * @param array $aConfiguration
     * @return string
     */
    protected function buildMappingConfiguration(array $aConfiguration)
    {
        $sOutput = '';
        switch($aConfiguration[MappingAbstract::KEY_MAPPING_TYPE]) {
            case MappingAbstract::MAPPING_ONE_TO_ONE :
                $sOutput .= '
            MappingAbstract::KEY_MAPPING_TYPE    => MappingAbstract::MAPPING_ONE_TO_ONE,
            MappingAbstract::KEY_LOAD_BY_DEFAULT => ' . (($aConfiguration[MappingAbstract::KEY_LOAD_BY_DEFAULT] === true) ? 'true' : 'false') . ',
            MappingAbstract::KEY_MAPPED_ENTITY_REFERENCE => "' . $aConfiguration[MappingAbstract::KEY_MAPPED_ENTITY_REFERENCE] . '"';
                break;
            case MappingAbstract::MAPPING_ONE_TO_MANY :
                $sOutput .= '
            MappingAbstract::KEY_MAPPING_TYPE    => MappingAbstract::MAPPING_ONE_TO_MANY,
            MappingAbstract::KEY_LOAD_BY_DEFAULT => ' . (($aConfiguration[MappingAbstract::KEY_LOAD_BY_DEFAULT] === true) ? 'true' : 'false') . ',
            MappingAbstract::KEY_SOURCE_ENTITY_REFERENCE => "' . $aConfiguration[MappingAbstract::KEY_SOURCE_ENTITY_REFERENCE] . '"';
                break;
            case MappingAbstract::MAPPING_MANY_TO_MANY :
                $sOutput .= '
            MappingAbstract::KEY_MAPPING_TYPE    => MappingAbstract::MAPPING_MANY_TO_MANY,
            MappingAbstract::KEY_LOAD_BY_DEFAULT => ' . (($aConfiguration[MappingAbstract::KEY_LOAD_BY_DEFAULT] === true) ? 'true' : 'false') . ',
            MappingAbstract::KEY_MAPPING_TABLE           => "' . $aConfiguration[MappingAbstract::KEY_MAPPING_TABLE] . '",
            MappingAbstract::KEY_MAPPED_ENTITY_REFERENCE => "' . $aConfiguration[MappingAbstract::KEY_MAPPED_ENTITY_REFERENCE] . '",
            MappingAbstract::KEY_SOURCE_ENTITY_REFERENCE => "' . $aConfiguration[MappingAbstract::KEY_SOURCE_ENTITY_REFERENCE] . '"';
                break;
        }
        return $sOutput;
    }

    /**
     * Build scaffolded entity file name
     *
     * @return string
     */
    protected function buildEntityFilename()
    {
        return ucfirst($this->getTableName()) . '.php';
    }

    /**
     * Compute the scaffolded Entity path from the default or given namespace
     *
     * @return string
     */
    protected function computePathFromNamespace()
    {
        return Bootstrap::getRootPath() . implode(DIRECTORY_SEPARATOR, explode('\\', $this->sNamespace)) . DIRECTORY_SEPARATOR;
    }

    /**
     * Return scaffolded Entity table name
     * @return string
     */
    public function getTableName()
    {
        return $this->sTableName;
    }

    /**
     * @param string $sNamespace
     * @return Entities
     */
    public function setNamespace($sNamespace)
    {
        $this->sNamespace = $sNamespace;
        return $this;
    }

    /**
     * @param boolean $bIsCacheable
     * @return Entities
     */
    public function setIsCacheable($bIsCacheable)
    {
        $this->bIsCacheable = $bIsCacheable;
        return $this;
    }

    /**
     * @param boolean $bIsDeletable
     * @return Entities
     */
    public function setIsDeletable($bIsDeletable)
    {
        $this->bIsDeletable = $bIsDeletable;
        return $this;
    }

    /**
     * @param boolean $bIsHistorized
     * @return Entities
     */
    public function setIsHistorized($bIsHistorized)
    {
        $this->bIsHistorized = $bIsHistorized;
        return $this;
    }

    /**
     * @param boolean $bIsSearchable
     * @return Entities
     */
    public function setIsSearchable($bIsSearchable)
    {
        $this->bIsSearchable = $bIsSearchable;
        return $this;
    }

    /**
     * @param mixed $iCacheDuration
     * @return Entities
     */
    public function setCacheDuration($iCacheDuration)
    {
        $this->iCacheDuration = $iCacheDuration;
        return $this;
    }

    /**
     * Set the scaffolded entity mapping configuration
     * @param array $aMappingConfiguration
     * @return Entities
     */
    public function setMappingConfiguration(array $aMappingConfiguration)
    {
        $this->aMappingConfiguration = $aMappingConfiguration;
        return $this;
    }

}

class EntityScaffoldException extends CoreException
{
    const ERROR_NO_TABLE_NAME_PROVIDED = 2;

    public static $aErrors = array(
        self::ERROR_NO_TABLE_NAME_PROVIDED => 'No table provided at Entities Scaffolder instance constructor.'
    );
}

