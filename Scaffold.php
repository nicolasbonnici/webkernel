<?php
namespace Library\Core;

/**
 * Scaffolding class
 *
 * @todo generer entitÃ©s et collections, les vues controlleur qui implemente directement les methodes du CrudController et les traductions etc...
 */
class Scaffold
{

    public function generateEntity($sTableName, $iCacheDuration = 120)
    {
        if (! empty($sTableName)) {
            $sEntityName = self::formatEntityName($sTableName);
            return '<?php

namespace app\Entities;

/**
 * ' . $sEntityName . ' entity statement
 *
 * @author generated by Core \Libray\Core\Scaffold
 */

class ' . $sEntityName . ' extends \Library\Core\Entity {

    const ENTITY = "' . $sEntityName . '";
    const TABLE_NAME = "' . $sTableName . '";
    const PRIMARY_KEY = "id' . strtolower($sEntityName) . '";

    /**
     * Object caching duration in seconds
     * @var integer
     */
    protected $iCacheDuration = ' . $iCacheDuration . ';

    protected $aLinkedEntities = array();

}
            ';
        }

        return false;
    }

    public function generateEntityCollection() {}

    /**
     * Scaffold a form for an entity
     *
     * @param \Library\Core\Entity $oEntity
     */
    public function form(\Library\Core\Entity $oEntity)
    {
        foreach ($oEntity->getAttributes() as $sAttrName) {
            $sDatatype = $oEntity->getDataType($sAttrName);
        	switch ($sDatatype) {
        		case Entity::DATA_TYPE_STRING:

        		    break;
        	   default:

        	       break;
        	}
        }
    }

    /**
     * Convert table name to \app\Entities valid name
     *
     *
     * @param string $sTableName
     */
    public static function formatEntityName($sTableName)
    {
        assert('strlen($sTableName) > 0');
        return ucfirst($sTableName);
    }
}

class CoreScaffoldingException extends \Exception
{
}

